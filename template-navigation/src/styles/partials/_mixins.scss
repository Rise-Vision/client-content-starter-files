/*=======
Colour Variables
=======*/

$gray : #BBBABA;
$white : #FFF;
$black : #000;
$textBlack : #333;
$buttonGreen : #9EBB3B;

/*=======
Shadow Variables
=======*/

$shadowDeep : 0 14px 14px rgba(0,0,0,0.2);
$shadowShallow : 0 1px 3px rgba(0,0,0, 0.15);

/*=======
Z-Index Variables
=======*/

$level1 : 1;
$level2 : 10;
$level3 : 20;
$level4 : 30;
$level5 : 40;
$level6 : 50;
$level7 : 60;
$level8 : 70;
$level9 : 80;
$level10 : 90;

/*=======
Font Variables for Different Weights
=======*/

$light: 100;
$medium: 300;
$regular: 400;
$bold: 700;

/*=======
Height Variables for portrait or landscape
=======*/

$portraitHeight : 1920px;
$portraitWidth : 1080px;
$landscapeHeight : 1080px;
$landscapeWidth : 1920px;

/*=======
Partials
=======*/

//mixin to size elements - if one value width = height
//e.g.
//.mainWrapper {
//@include size(1920px, 1080px);
//}

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin mainWrapper {
  @include size($landscapeWidth, $landscapeHeight);
}

//mixin to be used for the pages and main display areas. Values are set to null so won't be shown in
//CSS unless declared. Top and left values included for relative/absolute positioned elements
//e.g.
// .page {
// @include mainArea ($position:absolute, $padding:40px 20px, $t-position:100px, $l-position:200px);
//}
@mixin mainArea ($position:null, $padding:null, $l-margin:null, $r-margin:null, $t-position:null, $l-position:null) {
  display: $disp;
  padding: $padding;
  margin-left: $l-margin;
  margin-right: $r-margin;
  top: $t-position;
  left: $l-position;
}

%shadowShallow {
  box-shadow: $shadowShallow;
}

%shadowDeep {
  box-shadow: $shadowDeep;
}

%buttonArrow {
  position: absolute;
  width:68px;
  height:68px;
  border-radius:50%;
  top:0;
  left:0;
  background-color:$buttonGreen;
  transition:all 0.7s;

    .line1, .line2 {
    position: absolute;
    background-color:$white;
    width:20px;
    height:5px;
    border-radius:2px;
  }

  .line1 {
    transform:rotate(-45deg);
    top:31px;
    left:30px;
    transition:all 0.5s;
  }

  .line1--moved {
    transform:rotate(45deg);
  }

  .line2 {
    transform:rotate(45deg);
    top:31px;
    left:19px;
    transition:all 0.5s;
  }

  .line2--moved {
    transform:rotate(-45deg);
  }
}

//background gradient generator mixin:
@mixin background-gradient($start-color, $end-color, $orientation) {
    background: $start-color;

    @if $orientation == 'vertical' {
      background: linear-gradient(to bottom, $start-color, $end-color);
    } @else if $orientation == 'horizontal' {
      background: linear-gradient(to right, $start-color, $end-color);
    } @else {
      background: radial-gradient(ellipse at center, $start-color, $end-color);
    }
}

//mixin to center an element of any size, such as a modal popup:
@mixin center-element {
    position: absolute;
    top: 50%;
    left: 50%;
    @include prefix(transform, translate(-50%, -50%), 'webkit' 'ms');
}

//mixin to vertically center an element with known height:
@mixin center-vertical-known($height) {
    position: absolute;
    top: 50%;
    height: $height;
    margin-top: -($height / 2);
}

//mixin to vertically center an element with an unknown height
@mixin center-height-unknown {
    position: relative;
    top: 50%;
    @include prefix(transform, translateY(-50%), 'webkit' 'ms');
}

//mixin to trigger hardware acceleration
@mixin ha {
    @include prefix(transform, translate3d(0, 0, 0), 'webkit' 'ms');
    @include prefix(transform, scale3d(0,0,0), 'webkit' 'ms');
}

//functions to show black or white overlay with reduced opacity
@function black($opacity) {
    @return rgba(0, 0, 0, $opacity);
}

@function white($opacity) {
    @return rgba(255, 255, 255, $opacity);
}

//mixin to declare position with shorthand style, e.g.  @include position(absolute, $top: 100px, $left: 250px);
@mixin position($type, $top: null, $right: null, $bottom: null, $left: null) {
    position: $type;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}

//mixin for generating triangle pseudo element for menus, text boxes etc
//$direction can be declared as up, down, left or right

@mixin triangle($direction, $size: 20px, $color: #FFF){
  content: '';
  display: block;
  position: absolute;
  height: 0; width: 0;
  @if ($direction == 'up'){
    border-bottom: $size solid $color;
    border-left: 1/2*$size solid transparent;
    border-right: 1/2*$size solid transparent;
  }
  @else if ($direction == 'down'){
    border-top: $size solid $color;
    border-left: 1/2*$size solid transparent;
    border-right: 1/2*$size solid transparent;
  }
  @else if ($direction == 'left'){
    border-top: 1/2*$size solid transparent;
    border-bottom: 1/2*$size solid transparent;
    border-right: $size solid $color;
  }
  @else if ($direction == 'right'){
    border-top: 1/2*$size solid transparent;
    border-bottom: 1/2*$size solid transparent;
    border-left: $size solid $color;
  }
}

.button--arrow-down {
  @extend %buttonArrow;
}